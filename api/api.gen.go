// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"mime/multipart"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// AuthLogin defines model for AuthLogin.
type AuthLogin struct {
	// AccessToken JWT access token used in authentication
	AccessToken *string `json:"accessToken,omitempty"`

	// RefreshToken JWT-Refresh-Token used for expiration and renewal/extending of expiration time
	RefreshToken *string `json:"refreshToken,omitempty"`
}

// AuthLoginEmailRequest defines model for AuthLoginEmailRequest.
type AuthLoginEmailRequest struct {
	// Email The email address of the user.
	Email *openapi_types.Email `json:"email,omitempty"`

	// Password The password of the user.
	Password *string `json:"password,omitempty"`
}

// AuthLoginPhoneNumberRequest defines model for AuthLoginPhoneNumberRequest.
type AuthLoginPhoneNumberRequest struct {
	// Password The password of the user.
	Password *string `json:"password,omitempty"`

	// PhoneNumber The phone number of the user.
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// AuthLoginResponse defines model for AuthLoginResponse.
type AuthLoginResponse struct {
	Data *AuthLogin `json:"data,omitempty"`

	// Message description of process outcome
	Message *string `json:"message,omitempty"`

	// Success is the response a success response
	Success *bool `json:"success,omitempty"`
}

// AuthRegisterEmailRequest defines model for AuthRegisterEmailRequest.
type AuthRegisterEmailRequest struct {
	// Email The email address of the user.
	Email *openapi_types.Email `json:"email,omitempty"`

	// Password The password of the user.
	Password *string `json:"password,omitempty"`
}

// AuthRegisterPhoneNumberRequest defines model for AuthRegisterPhoneNumberRequest.
type AuthRegisterPhoneNumberRequest struct {
	// Password The password of the user.
	Password *string `json:"password,omitempty"`

	// PhoneNumber The phone number of the user.
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// Chat defines model for Chat.
type Chat struct {
	// ChatName The name of the chat (for group chats).
	ChatName *string `json:"chatName,omitempty"`

	// ChatType The type of chat.
	ChatType *string `json:"chatType,omitempty"`

	// CreatedAt The date and time the chat was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id The unique identifier for the chat.
	Id *string `json:"id,omitempty"`

	// LastMessageId The ID of the last message sent in the chat.
	LastMessageId *string `json:"lastMessageId,omitempty"`

	// Participants The participants in the chat.
	Participants *[]string `json:"participants,omitempty"`

	// UpdatedAt The date and time the chat was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// ChatCreateRequest defines model for ChatCreateRequest.
type ChatCreateRequest struct {
	// ChatName The name of the chat (for group chats).
	ChatName *string `json:"chatName,omitempty"`

	// ChatType The type of chat to create.
	ChatType string `json:"chatType"`

	// Participants The participants in the chat.
	Participants []string `json:"participants"`
}

// ChatGroup defines model for ChatGroup.
type ChatGroup struct {
	// AdminIds The IDs of the admins of the chat group.
	AdminIds *[]string `json:"adminIds,omitempty"`

	// ChatId The ID of the associated chat.
	ChatId *string `json:"chatId,omitempty"`

	// CreatedAt The date and time the chat group was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Description A description of the chat group.
	Description *string `json:"description,omitempty"`

	// GroupName The name of the chat group.
	GroupName *string `json:"groupName,omitempty"`

	// Id The unique identifier for the chat group.
	Id *string `json:"id,omitempty"`

	// Members The members of the chat group.
	Members *[]string `json:"members,omitempty"`

	// ProfileUrl URL to the chat group's profile picture.
	ProfileUrl *string `json:"profileUrl,omitempty"`

	// UpdatedAt The date and time the chat group was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// ChatGroupCreateRequest defines model for ChatGroupCreateRequest.
type ChatGroupCreateRequest struct {
	// AdminIds The IDs of the admins of the chat group.
	AdminIds []string `json:"adminIds"`

	// Description A description of the chat group.
	Description *string `json:"description,omitempty"`

	// GroupName The name of the chat group.
	GroupName string `json:"groupName"`

	// Members The members of the chat group.
	Members []string `json:"members"`

	// ProfileUrl URL to the chat group's profile picture.
	ProfileUrl *string `json:"profileUrl,omitempty"`
}

// ChatGroupUpdateRequest defines model for ChatGroupUpdateRequest.
type ChatGroupUpdateRequest struct {
	// AdminIds The IDs of the admins of the chat group.
	AdminIds *[]string `json:"adminIds,omitempty"`

	// ChatId The ID of the associated chat.
	ChatId *string `json:"chatId,omitempty"`

	// Description A description of the chat group.
	Description *string `json:"description,omitempty"`

	// GroupName The name of the chat group.
	GroupName *string `json:"groupName,omitempty"`

	// Members The members of the chat group.
	Members *[]string `json:"members,omitempty"`

	// ProfileUrl URL to the chat group's profile picture.
	ProfileUrl *string `json:"profileUrl,omitempty"`
}

// ChatUpdateRequest defines model for ChatUpdateRequest.
type ChatUpdateRequest struct {
	// ChatName The name of the chat.
	ChatName *string `json:"chatName,omitempty"`

	// ChatType The type of chat.
	ChatType *string `json:"chatType,omitempty"`

	// LastMessageId The ID of the last message sent in the chat.
	LastMessageId *string `json:"lastMessageId,omitempty"`

	// Participants The participants in the chat.
	Participants *[]string `json:"participants,omitempty"`
}

// ErrorGenericResponse defines model for ErrorGenericResponse.
type ErrorGenericResponse struct {
	// Message description of process outcome
	Message string `json:"message"`

	// Success success status of the response
	Success bool `json:"success"`
}

// GlobalResponses defines model for GlobalResponses.
type GlobalResponses struct {
	// ResponseCode The response code.
	ResponseCode string `json:"responseCode"`

	// ResponseMessage A human-readable message describing the response.
	ResponseMessage string `json:"responseMessage"`
}

// Highlight defines model for Highlight.
type Highlight struct {
	// Id The unique identifier for the highlight.
	Id *string `json:"id,omitempty"`

	// Item The item the highlight is from.
	Item *string `json:"item,omitempty"`

	// Quote The highlighted text.
	Quote *string `json:"quote,omitempty"`

	// Timestamp The date and time the highlight was created.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// UserId The ID of the user who created the highlight.
	UserId *string `json:"userId,omitempty"`
}

// Media defines model for Media.
type Media struct {
	// ChatId The ID of the chat the media is associated with.
	ChatId *string `json:"chatId,omitempty"`

	// FileName The name of the media file.
	FileName *string `json:"fileName,omitempty"`

	// FileSize The size of the media file in bytes.
	FileSize *int `json:"fileSize,omitempty"`

	// Id The unique identifier for the media.
	Id *string `json:"id,omitempty"`

	// MediaType The type of media.
	MediaType *string `json:"mediaType,omitempty"`

	// MediaUrl URL to the media file.
	MediaUrl *string `json:"mediaUrl,omitempty"`

	// SenderId The ID of the user who sent the media.
	SenderId *string `json:"senderId,omitempty"`

	// UploadTimestamp The date and time the media was uploaded.
	UploadTimestamp *time.Time `json:"uploadTimestamp,omitempty"`
}

// MediaUploadRequest defines model for MediaUploadRequest.
type MediaUploadRequest struct {
	// ChatId The ID of the chat the media is being uploaded to.
	ChatId string `json:"chatId"`

	// File The media file to upload.
	File openapi_types.File `json:"file"`

	// MediaType The type of media.
	MediaType string `json:"mediaType"`

	// SenderId The ID of the user uploading the media.
	SenderId string `json:"senderId"`
}

// Message defines model for Message.
type Message struct {
	// ChatId The ID of the chat the message belongs to.
	ChatId *string `json:"chatId,omitempty"`

	// Content The content of the message.
	Content *string `json:"content,omitempty"`

	// EditedMessage Indicates if the message has been edited.
	EditedMessage *bool `json:"editedMessage,omitempty"`

	// EditedTimestamp The date and time the message was last edited.
	EditedTimestamp *time.Time `json:"editedTimestamp,omitempty"`

	// Id The unique identifier for the message.
	Id *string `json:"id,omitempty"`

	// MediaUrls URLs to any media files attached to the message.
	MediaUrls *[]string `json:"mediaUrls,omitempty"`

	// Mentions IDs of users mentioned in the message.
	Mentions *[]string `json:"mentions,omitempty"`

	// MessageType The type of message.
	MessageType *string `json:"messageType,omitempty"`

	// RepliedToMessageId The ID of the message this message is a reply to.
	RepliedToMessageId *string `json:"repliedToMessageId,omitempty"`

	// SenderId The ID of the user who sent the message.
	SenderId *string `json:"senderId,omitempty"`

	// Status The status of the message.
	Status *string `json:"status,omitempty"`

	// Timestamp The date and time the message was sent.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// MessageCreateRequest defines model for MessageCreateRequest.
type MessageCreateRequest struct {
	// ChatId The ID of the chat to send the message to.
	ChatId string `json:"chatId"`

	// Content The content of the message. Required for text messages.
	Content *string `json:"content,omitempty"`

	// MediaUrls URLs to any media files attached to the message.  Required for media messages.
	MediaUrls *[]string `json:"mediaUrls,omitempty"`

	// Mentions IDs of users mentioned in the message.
	Mentions *[]string `json:"mentions,omitempty"`

	// MessageType The type of message.
	MessageType string `json:"messageType"`

	// RepliedToMessageId The ID of the message this message is a reply to.
	RepliedToMessageId *string `json:"repliedToMessageId,omitempty"`

	// SenderId The ID of the user sending the message.
	SenderId string `json:"senderId"`
}

// MessageUpdateRequest defines model for MessageUpdateRequest.
type MessageUpdateRequest struct {
	// Content The updated content of the message.
	Content *string `json:"content,omitempty"`

	// MediaUrls URLs to any media files attached to the message.
	MediaUrls *[]string `json:"mediaUrls,omitempty"`

	// Mentions IDs of users mentioned in the message.
	Mentions *[]string `json:"mentions,omitempty"`

	// RepliedToMessageId The ID of the message this message is a reply to.
	RepliedToMessageId *string `json:"repliedToMessageId,omitempty"`

	// Status The status of the message.
	Status *string `json:"status,omitempty"`
}

// Settings defines model for Settings.
type Settings struct {
	// CreatedAt The date and time the settings were created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id The unique identifier for the settings.
	Id *string `json:"id,omitempty"`

	// Settings The user's settings (JSON string).
	Settings *string `json:"settings,omitempty"`

	// UpdatedAt The date and time the settings were last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UserId The ID of the user the settings belong to.
	UserId *string `json:"userId,omitempty"`
}

// User defines model for User.
type User struct {
	// Bio A short biography of the user.
	Bio *string `json:"bio,omitempty"`

	// Country The user's country.
	Country *string `json:"country,omitempty"`

	// CreatedAt The date and time the user was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Email The email address of the user.
	Email *openapi_types.Email `json:"email,omitempty"`

	// FirstName The first name of the user.
	FirstName *string `json:"firstName,omitempty"`

	// Id The unique identifier for the user.
	Id *string `json:"id,omitempty"`

	// LanguagePreference The user's preferred language.
	LanguagePreference *string `json:"languagePreference,omitempty"`

	// LastName The last name of the user.
	LastName *string `json:"lastName,omitempty"`

	// Password The password of the user (hashed).  Write-only.
	Password *string `json:"password,omitempty"`

	// PhoneNumber The phone number of the user.
	PhoneNumber *string `json:"phoneNumber,omitempty"`

	// ProfilePicture URL to the user's profile picture.
	ProfilePicture *string `json:"profilePicture,omitempty"`

	// Status The status of the user.
	Status *string `json:"status,omitempty"`

	// Timezone The user's timezone.
	Timezone *string `json:"timezone,omitempty"`

	// UpdatedAt The date and time the user was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UserType The type of user.
	UserType *string `json:"userType,omitempty"`

	// Username The username of the user.
	Username *string `json:"username,omitempty"`
}

// UserCreateRequest defines model for UserCreateRequest.
type UserCreateRequest struct {
	// Bio A short biography of the user.
	Bio *string `json:"bio,omitempty"`

	// Country The user's country.
	Country *string `json:"country,omitempty"`

	// Email The email address of the user.
	Email openapi_types.Email `json:"email"`

	// FirstName The first name of the user.
	FirstName string `json:"firstName"`

	// LanguagePreference The user's preferred language.
	LanguagePreference *string `json:"languagePreference,omitempty"`

	// LastName The last name of the user.
	LastName string `json:"lastName"`

	// Password The password of the user.
	Password string `json:"password"`

	// PhoneNumber The phone number of the user.
	PhoneNumber *string `json:"phoneNumber,omitempty"`

	// ProfilePicture URL to the user's profile picture.
	ProfilePicture *string `json:"profilePicture,omitempty"`

	// Status The status of the user.
	Status *string `json:"status,omitempty"`

	// Timezone The user's timezone.
	Timezone *string `json:"timezone,omitempty"`

	// UserType The type of user.
	UserType string `json:"userType"`

	// Username The username of the user.
	Username string `json:"username"`
}

// UserCreatedResponse defines model for UserCreatedResponse.
type UserCreatedResponse struct {
	Data *User `json:"data,omitempty"`

	// Message Registered user details (may contain arbitrary defaults)
	Message *string `json:"message,omitempty"`

	// Success Successful response
	Success *bool `json:"success,omitempty"`
}

// UserSuccessResponse defines model for UserSuccessResponse.
type UserSuccessResponse struct {
	Data *User `json:"data,omitempty"`

	// Message description of process outcome
	Message *string `json:"message,omitempty"`

	// Success Is the response a success response
	Success *bool `json:"success,omitempty"`
}

// UserUpdateRequest defines model for UserUpdateRequest.
type UserUpdateRequest struct {
	// Bio A short biography of the user.
	Bio *string `json:"bio,omitempty"`

	// Country The user's country.
	Country *string `json:"country,omitempty"`

	// Email The email address of the user.
	Email *openapi_types.Email `json:"email,omitempty"`

	// FirstName The first name of the user.
	FirstName *string `json:"firstName,omitempty"`

	// LanguagePreference The user's preferred language.
	LanguagePreference *string `json:"languagePreference,omitempty"`

	// LastName The last name of the user.
	LastName *string `json:"lastName,omitempty"`

	// Password The password of the user.
	Password *string `json:"password,omitempty"`

	// PhoneNumber The phone number of the user.
	PhoneNumber *string `json:"phoneNumber,omitempty"`

	// ProfilePicture URL to the user's profile picture.
	ProfilePicture *string `json:"profilePicture,omitempty"`

	// Status The status of the user.
	Status *string `json:"status,omitempty"`

	// Timezone The user's timezone.
	Timezone *string `json:"timezone,omitempty"`

	// UserType The type of user.
	UserType *string `json:"userType,omitempty"`

	// Username The username of the user.
	Username *string `json:"username,omitempty"`
}

// N400BadRequest defines model for 400BadRequest.
type N400BadRequest = ErrorGenericResponse

// N401Unauthorized defines model for 401Unauthorized.
type N401Unauthorized = ErrorGenericResponse

// N500InternalServerError defines model for 500InternalServerError.
type N500InternalServerError = ErrorGenericResponse

// AuthLoginSuccess defines model for AuthLoginSuccess.
type AuthLoginSuccess = AuthLoginResponse

// UserRegistrationSuccess defines model for UserRegistrationSuccess.
type UserRegistrationSuccess = UserCreatedResponse

// UserSuccess defines model for UserSuccess.
type UserSuccess = UserSuccessResponse

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	union json.RawMessage
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	union json.RawMessage
}

// AuthLoginJSONBody defines parameters for AuthLogin.
type AuthLoginJSONBody struct {
	union json.RawMessage
}

// AuthRegisterJSONBody defines parameters for AuthRegister.
type AuthRegisterJSONBody struct {
	union json.RawMessage
}

// GetMessagesByChatIdParams defines parameters for GetMessagesByChatId.
type GetMessagesByChatIdParams struct {
	// ChatId The ID of the chat to retrieve messages from.
	ChatId string `form:"chatId" json:"chatId"`
}

// AuthLoginJSONRequestBody defines body for AuthLogin for application/json ContentType.
type AuthLoginJSONRequestBody AuthLoginJSONBody

// AuthRegisterJSONRequestBody defines body for AuthRegister for application/json ContentType.
type AuthRegisterJSONRequestBody AuthRegisterJSONBody

// CreateChatGroupJSONRequestBody defines body for CreateChatGroup for application/json ContentType.
type CreateChatGroupJSONRequestBody = ChatGroupCreateRequest

// UpdateChatGroupJSONRequestBody defines body for UpdateChatGroup for application/json ContentType.
type UpdateChatGroupJSONRequestBody = ChatGroupUpdateRequest

// CreateChatJSONRequestBody defines body for CreateChat for application/json ContentType.
type CreateChatJSONRequestBody = ChatCreateRequest

// UpdateChatJSONRequestBody defines body for UpdateChat for application/json ContentType.
type UpdateChatJSONRequestBody = ChatUpdateRequest

// CreateHighlightJSONRequestBody defines body for CreateHighlight for application/json ContentType.
type CreateHighlightJSONRequestBody = Highlight

// UpdateHighlightByIdJSONRequestBody defines body for UpdateHighlightById for application/json ContentType.
type UpdateHighlightByIdJSONRequestBody = Highlight

// UploadMediaMultipartRequestBody defines body for UploadMedia for multipart/form-data ContentType.
type UploadMediaMultipartRequestBody = MediaUploadRequest

// SendMessageJSONRequestBody defines body for SendMessage for application/json ContentType.
type SendMessageJSONRequestBody = MessageCreateRequest

// UpdateMessageJSONRequestBody defines body for UpdateMessage for application/json ContentType.
type UpdateMessageJSONRequestBody = MessageUpdateRequest

// UpdateUserSettingsJSONRequestBody defines body for UpdateUserSettings for application/json ContentType.
type UpdateUserSettingsJSONRequestBody = Settings

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = UserCreateRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UserUpdateRequest

// AsAuthLoginEmailRequest returns the union data inside the LoginRequest as a AuthLoginEmailRequest
func (t LoginRequest) AsAuthLoginEmailRequest() (AuthLoginEmailRequest, error) {
	var body AuthLoginEmailRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAuthLoginEmailRequest overwrites any union data inside the LoginRequest as the provided AuthLoginEmailRequest
func (t *LoginRequest) FromAuthLoginEmailRequest(v AuthLoginEmailRequest) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAuthLoginEmailRequest performs a merge with any union data inside the LoginRequest, using the provided AuthLoginEmailRequest
func (t *LoginRequest) MergeAuthLoginEmailRequest(v AuthLoginEmailRequest) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAuthLoginPhoneNumberRequest returns the union data inside the LoginRequest as a AuthLoginPhoneNumberRequest
func (t LoginRequest) AsAuthLoginPhoneNumberRequest() (AuthLoginPhoneNumberRequest, error) {
	var body AuthLoginPhoneNumberRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAuthLoginPhoneNumberRequest overwrites any union data inside the LoginRequest as the provided AuthLoginPhoneNumberRequest
func (t *LoginRequest) FromAuthLoginPhoneNumberRequest(v AuthLoginPhoneNumberRequest) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAuthLoginPhoneNumberRequest performs a merge with any union data inside the LoginRequest, using the provided AuthLoginPhoneNumberRequest
func (t *LoginRequest) MergeAuthLoginPhoneNumberRequest(v AuthLoginPhoneNumberRequest) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LoginRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LoginRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAuthRegisterEmailRequest returns the union data inside the RegisterRequest as a AuthRegisterEmailRequest
func (t RegisterRequest) AsAuthRegisterEmailRequest() (AuthRegisterEmailRequest, error) {
	var body AuthRegisterEmailRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAuthRegisterEmailRequest overwrites any union data inside the RegisterRequest as the provided AuthRegisterEmailRequest
func (t *RegisterRequest) FromAuthRegisterEmailRequest(v AuthRegisterEmailRequest) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAuthRegisterEmailRequest performs a merge with any union data inside the RegisterRequest, using the provided AuthRegisterEmailRequest
func (t *RegisterRequest) MergeAuthRegisterEmailRequest(v AuthRegisterEmailRequest) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAuthRegisterPhoneNumberRequest returns the union data inside the RegisterRequest as a AuthRegisterPhoneNumberRequest
func (t RegisterRequest) AsAuthRegisterPhoneNumberRequest() (AuthRegisterPhoneNumberRequest, error) {
	var body AuthRegisterPhoneNumberRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAuthRegisterPhoneNumberRequest overwrites any union data inside the RegisterRequest as the provided AuthRegisterPhoneNumberRequest
func (t *RegisterRequest) FromAuthRegisterPhoneNumberRequest(v AuthRegisterPhoneNumberRequest) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAuthRegisterPhoneNumberRequest performs a merge with any union data inside the RegisterRequest, using the provided AuthRegisterPhoneNumberRequest
func (t *RegisterRequest) MergeAuthRegisterPhoneNumberRequest(v AuthRegisterPhoneNumberRequest) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RegisterRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RegisterRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Index entry for api status
	// (GET /)
	Index(c *fiber.Ctx) error
	// Logs in and returns JWT-auth-token
	// (POST /auth/login)
	AuthLogin(c *fiber.Ctx) error
	// Registers and returns user information
	// (POST /auth/register)
	AuthRegister(c *fiber.Ctx) error
	// Get all chat groups
	// (GET /chatgroups)
	GetAllChatGroups(c *fiber.Ctx) error
	// Create a new chat group
	// (POST /chatgroups)
	CreateChatGroup(c *fiber.Ctx) error
	// Delete a chat group
	// (DELETE /chatgroups/{chatGroupId})
	DeleteChatGroup(c *fiber.Ctx, chatGroupId string) error
	// Get a chat group by ID
	// (GET /chatgroups/{chatGroupId})
	GetChatGroupById(c *fiber.Ctx, chatGroupId string) error
	// Update a chat group
	// (PUT /chatgroups/{chatGroupId})
	UpdateChatGroup(c *fiber.Ctx, chatGroupId string) error
	// Get all chats
	// (GET /chats)
	GetAllChats(c *fiber.Ctx) error
	// Create a new chat
	// (POST /chats)
	CreateChat(c *fiber.Ctx) error
	// Delete a chat
	// (DELETE /chats/{chatId})
	DeleteChat(c *fiber.Ctx, chatId string) error
	// Get a chat by ID
	// (GET /chats/{chatId})
	GetChatById(c *fiber.Ctx, chatId string) error
	// Update a chat
	// (PUT /chats/{chatId})
	UpdateChat(c *fiber.Ctx, chatId string) error
	// Get all highlights
	// (GET /highlights)
	GetAllHighlights(c *fiber.Ctx) error
	// Create a new highlight
	// (POST /highlights)
	CreateHighlight(c *fiber.Ctx) error
	// Delete highlight by ID
	// (DELETE /highlights/{highlightId})
	DeleteHighlightById(c *fiber.Ctx, highlightId string) error
	// Get highlight by ID
	// (GET /highlights/{highlightId})
	GetHighlightById(c *fiber.Ctx, highlightId string) error
	// Update highlight by ID
	// (PUT /highlights/{highlightId})
	UpdateHighlightById(c *fiber.Ctx, highlightId string) error
	// Upload media
	// (POST /media)
	UploadMedia(c *fiber.Ctx) error
	// Delete media
	// (DELETE /media/{mediaId})
	DeleteMedia(c *fiber.Ctx, mediaId string) error
	// Get media by ID
	// (GET /media/{mediaId})
	GetMediaById(c *fiber.Ctx, mediaId string) error
	// Get messages for a chat
	// (GET /messages)
	GetMessagesByChatId(c *fiber.Ctx, params GetMessagesByChatIdParams) error
	// Send a new message
	// (POST /messages)
	SendMessage(c *fiber.Ctx) error
	// Delete a message
	// (DELETE /messages/{messageId})
	DeleteMessage(c *fiber.Ctx, messageId string) error
	// Get a message by ID
	// (GET /messages/{messageId})
	GetMessageById(c *fiber.Ctx, messageId string) error
	// Update a message
	// (PUT /messages/{messageId})
	UpdateMessage(c *fiber.Ctx, messageId string) error
	// Get user settings
	// (GET /settings/{userId})
	GetUserSettings(c *fiber.Ctx, userId string) error
	// Update user settings
	// (PUT /settings/{userId})
	UpdateUserSettings(c *fiber.Ctx, userId string) error
	// Get all users
	// (GET /users)
	GetAllUsers(c *fiber.Ctx) error
	// Create a new user
	// (POST /users)
	CreateUser(c *fiber.Ctx) error
	// Delete a user
	// (DELETE /users/{userId})
	DeleteUser(c *fiber.Ctx, userId string) error
	// Get a user by ID
	// (GET /users/{userId})
	GetUserById(c *fiber.Ctx, userId string) error
	// Update a user
	// (PUT /users/{userId})
	UpdateUser(c *fiber.Ctx, userId string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// Index operation middleware
func (siw *ServerInterfaceWrapper) Index(c *fiber.Ctx) error {

	return siw.Handler.Index(c)
}

// AuthLogin operation middleware
func (siw *ServerInterfaceWrapper) AuthLogin(c *fiber.Ctx) error {

	return siw.Handler.AuthLogin(c)
}

// AuthRegister operation middleware
func (siw *ServerInterfaceWrapper) AuthRegister(c *fiber.Ctx) error {

	return siw.Handler.AuthRegister(c)
}

// GetAllChatGroups operation middleware
func (siw *ServerInterfaceWrapper) GetAllChatGroups(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetAllChatGroups(c)
}

// CreateChatGroup operation middleware
func (siw *ServerInterfaceWrapper) CreateChatGroup(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateChatGroup(c)
}

// DeleteChatGroup operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatGroup(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "chatGroupId" -------------
	var chatGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "chatGroupId", c.Params("chatGroupId"), &chatGroupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter chatGroupId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteChatGroup(c, chatGroupId)
}

// GetChatGroupById operation middleware
func (siw *ServerInterfaceWrapper) GetChatGroupById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "chatGroupId" -------------
	var chatGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "chatGroupId", c.Params("chatGroupId"), &chatGroupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter chatGroupId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetChatGroupById(c, chatGroupId)
}

// UpdateChatGroup operation middleware
func (siw *ServerInterfaceWrapper) UpdateChatGroup(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "chatGroupId" -------------
	var chatGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "chatGroupId", c.Params("chatGroupId"), &chatGroupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter chatGroupId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateChatGroup(c, chatGroupId)
}

// GetAllChats operation middleware
func (siw *ServerInterfaceWrapper) GetAllChats(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetAllChats(c)
}

// CreateChat operation middleware
func (siw *ServerInterfaceWrapper) CreateChat(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateChat(c)
}

// DeleteChat operation middleware
func (siw *ServerInterfaceWrapper) DeleteChat(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "chatId" -------------
	var chatId string

	err = runtime.BindStyledParameterWithOptions("simple", "chatId", c.Params("chatId"), &chatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter chatId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteChat(c, chatId)
}

// GetChatById operation middleware
func (siw *ServerInterfaceWrapper) GetChatById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "chatId" -------------
	var chatId string

	err = runtime.BindStyledParameterWithOptions("simple", "chatId", c.Params("chatId"), &chatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter chatId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetChatById(c, chatId)
}

// UpdateChat operation middleware
func (siw *ServerInterfaceWrapper) UpdateChat(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "chatId" -------------
	var chatId string

	err = runtime.BindStyledParameterWithOptions("simple", "chatId", c.Params("chatId"), &chatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter chatId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateChat(c, chatId)
}

// GetAllHighlights operation middleware
func (siw *ServerInterfaceWrapper) GetAllHighlights(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetAllHighlights(c)
}

// CreateHighlight operation middleware
func (siw *ServerInterfaceWrapper) CreateHighlight(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateHighlight(c)
}

// DeleteHighlightById operation middleware
func (siw *ServerInterfaceWrapper) DeleteHighlightById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "highlightId" -------------
	var highlightId string

	err = runtime.BindStyledParameterWithOptions("simple", "highlightId", c.Params("highlightId"), &highlightId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter highlightId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteHighlightById(c, highlightId)
}

// GetHighlightById operation middleware
func (siw *ServerInterfaceWrapper) GetHighlightById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "highlightId" -------------
	var highlightId string

	err = runtime.BindStyledParameterWithOptions("simple", "highlightId", c.Params("highlightId"), &highlightId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter highlightId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetHighlightById(c, highlightId)
}

// UpdateHighlightById operation middleware
func (siw *ServerInterfaceWrapper) UpdateHighlightById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "highlightId" -------------
	var highlightId string

	err = runtime.BindStyledParameterWithOptions("simple", "highlightId", c.Params("highlightId"), &highlightId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter highlightId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateHighlightById(c, highlightId)
}

// UploadMedia operation middleware
func (siw *ServerInterfaceWrapper) UploadMedia(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UploadMedia(c)
}

// DeleteMedia operation middleware
func (siw *ServerInterfaceWrapper) DeleteMedia(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "mediaId" -------------
	var mediaId string

	err = runtime.BindStyledParameterWithOptions("simple", "mediaId", c.Params("mediaId"), &mediaId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter mediaId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteMedia(c, mediaId)
}

// GetMediaById operation middleware
func (siw *ServerInterfaceWrapper) GetMediaById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "mediaId" -------------
	var mediaId string

	err = runtime.BindStyledParameterWithOptions("simple", "mediaId", c.Params("mediaId"), &mediaId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter mediaId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetMediaById(c, mediaId)
}

// GetMessagesByChatId operation middleware
func (siw *ServerInterfaceWrapper) GetMessagesByChatId(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMessagesByChatIdParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "chatId" -------------

	if paramValue := c.Query("chatId"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument chatId is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "chatId", query, &params.ChatId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter chatId: %w", err).Error())
	}

	return siw.Handler.GetMessagesByChatId(c, params)
}

// SendMessage operation middleware
func (siw *ServerInterfaceWrapper) SendMessage(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.SendMessage(c)
}

// DeleteMessage operation middleware
func (siw *ServerInterfaceWrapper) DeleteMessage(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "messageId" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "messageId", c.Params("messageId"), &messageId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter messageId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteMessage(c, messageId)
}

// GetMessageById operation middleware
func (siw *ServerInterfaceWrapper) GetMessageById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "messageId" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "messageId", c.Params("messageId"), &messageId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter messageId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetMessageById(c, messageId)
}

// UpdateMessage operation middleware
func (siw *ServerInterfaceWrapper) UpdateMessage(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "messageId" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "messageId", c.Params("messageId"), &messageId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter messageId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateMessage(c, messageId)
}

// GetUserSettings operation middleware
func (siw *ServerInterfaceWrapper) GetUserSettings(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Params("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetUserSettings(c, userId)
}

// UpdateUserSettings operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserSettings(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Params("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateUserSettings(c, userId)
}

// GetAllUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAllUsers(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetAllUsers(c)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateUser(c)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Params("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteUser(c, userId)
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Params("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetUserById(c, userId)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Params("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateUser(c, userId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/", wrapper.Index)

	router.Post(options.BaseURL+"/auth/login", wrapper.AuthLogin)

	router.Post(options.BaseURL+"/auth/register", wrapper.AuthRegister)

	router.Get(options.BaseURL+"/chatgroups", wrapper.GetAllChatGroups)

	router.Post(options.BaseURL+"/chatgroups", wrapper.CreateChatGroup)

	router.Delete(options.BaseURL+"/chatgroups/:chatGroupId", wrapper.DeleteChatGroup)

	router.Get(options.BaseURL+"/chatgroups/:chatGroupId", wrapper.GetChatGroupById)

	router.Put(options.BaseURL+"/chatgroups/:chatGroupId", wrapper.UpdateChatGroup)

	router.Get(options.BaseURL+"/chats", wrapper.GetAllChats)

	router.Post(options.BaseURL+"/chats", wrapper.CreateChat)

	router.Delete(options.BaseURL+"/chats/:chatId", wrapper.DeleteChat)

	router.Get(options.BaseURL+"/chats/:chatId", wrapper.GetChatById)

	router.Put(options.BaseURL+"/chats/:chatId", wrapper.UpdateChat)

	router.Get(options.BaseURL+"/highlights", wrapper.GetAllHighlights)

	router.Post(options.BaseURL+"/highlights", wrapper.CreateHighlight)

	router.Delete(options.BaseURL+"/highlights/:highlightId", wrapper.DeleteHighlightById)

	router.Get(options.BaseURL+"/highlights/:highlightId", wrapper.GetHighlightById)

	router.Put(options.BaseURL+"/highlights/:highlightId", wrapper.UpdateHighlightById)

	router.Post(options.BaseURL+"/media", wrapper.UploadMedia)

	router.Delete(options.BaseURL+"/media/:mediaId", wrapper.DeleteMedia)

	router.Get(options.BaseURL+"/media/:mediaId", wrapper.GetMediaById)

	router.Get(options.BaseURL+"/messages", wrapper.GetMessagesByChatId)

	router.Post(options.BaseURL+"/messages", wrapper.SendMessage)

	router.Delete(options.BaseURL+"/messages/:messageId", wrapper.DeleteMessage)

	router.Get(options.BaseURL+"/messages/:messageId", wrapper.GetMessageById)

	router.Put(options.BaseURL+"/messages/:messageId", wrapper.UpdateMessage)

	router.Get(options.BaseURL+"/settings/:userId", wrapper.GetUserSettings)

	router.Put(options.BaseURL+"/settings/:userId", wrapper.UpdateUserSettings)

	router.Get(options.BaseURL+"/users", wrapper.GetAllUsers)

	router.Post(options.BaseURL+"/users", wrapper.CreateUser)

	router.Delete(options.BaseURL+"/users/:userId", wrapper.DeleteUser)

	router.Get(options.BaseURL+"/users/:userId", wrapper.GetUserById)

	router.Put(options.BaseURL+"/users/:userId", wrapper.UpdateUser)

}

type N400BadRequestJSONResponse ErrorGenericResponse

type N401UnauthorizedJSONResponse ErrorGenericResponse

type N500InternalServerErrorJSONResponse ErrorGenericResponse

type AuthLoginSuccessJSONResponse AuthLoginResponse

type UserRegistrationSuccessJSONResponse UserCreatedResponse

type UserSuccessJSONResponse UserSuccessResponse

type IndexRequestObject struct {
}

type IndexResponseObject interface {
	VisitIndexResponse(ctx *fiber.Ctx) error
}

type Index200JSONResponse ChatCreateRequest

func (response Index200JSONResponse) VisitIndexResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type AuthLoginRequestObject struct {
	Body *AuthLoginJSONRequestBody
}

type AuthLoginResponseObject interface {
	VisitAuthLoginResponse(ctx *fiber.Ctx) error
}

type AuthLogin200JSONResponse struct{ AuthLoginSuccessJSONResponse }

func (response AuthLogin200JSONResponse) VisitAuthLoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type AuthLogin400JSONResponse struct{ N400BadRequestJSONResponse }

func (response AuthLogin400JSONResponse) VisitAuthLoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type AuthLogin401JSONResponse struct{ N401UnauthorizedJSONResponse }

func (response AuthLogin401JSONResponse) VisitAuthLoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type AuthLogin500JSONResponse struct {
	N500InternalServerErrorJSONResponse
}

func (response AuthLogin500JSONResponse) VisitAuthLoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type AuthRegisterRequestObject struct {
	Body *AuthRegisterJSONRequestBody
}

type AuthRegisterResponseObject interface {
	VisitAuthRegisterResponse(ctx *fiber.Ctx) error
}

type AuthRegister201JSONResponse struct {
	UserRegistrationSuccessJSONResponse
}

func (response AuthRegister201JSONResponse) VisitAuthRegisterResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type AuthRegister400JSONResponse struct{ N400BadRequestJSONResponse }

func (response AuthRegister400JSONResponse) VisitAuthRegisterResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type AuthRegister500JSONResponse struct {
	N500InternalServerErrorJSONResponse
}

func (response AuthRegister500JSONResponse) VisitAuthRegisterResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetAllChatGroupsRequestObject struct {
}

type GetAllChatGroupsResponseObject interface {
	VisitGetAllChatGroupsResponse(ctx *fiber.Ctx) error
}

type GetAllChatGroups200JSONResponse []ChatGroup

func (response GetAllChatGroups200JSONResponse) VisitGetAllChatGroupsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetAllChatGroups500JSONResponse GlobalResponses

func (response GetAllChatGroups500JSONResponse) VisitGetAllChatGroupsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type CreateChatGroupRequestObject struct {
	Body *CreateChatGroupJSONRequestBody
}

type CreateChatGroupResponseObject interface {
	VisitCreateChatGroupResponse(ctx *fiber.Ctx) error
}

type CreateChatGroup201JSONResponse ChatGroup

func (response CreateChatGroup201JSONResponse) VisitCreateChatGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type CreateChatGroup400JSONResponse GlobalResponses

func (response CreateChatGroup400JSONResponse) VisitCreateChatGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type CreateChatGroup500JSONResponse GlobalResponses

func (response CreateChatGroup500JSONResponse) VisitCreateChatGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteChatGroupRequestObject struct {
	ChatGroupId string `json:"chatGroupId"`
}

type DeleteChatGroupResponseObject interface {
	VisitDeleteChatGroupResponse(ctx *fiber.Ctx) error
}

type DeleteChatGroup204Response struct {
}

func (response DeleteChatGroup204Response) VisitDeleteChatGroupResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteChatGroup404JSONResponse GlobalResponses

func (response DeleteChatGroup404JSONResponse) VisitDeleteChatGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteChatGroup500JSONResponse GlobalResponses

func (response DeleteChatGroup500JSONResponse) VisitDeleteChatGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetChatGroupByIdRequestObject struct {
	ChatGroupId string `json:"chatGroupId"`
}

type GetChatGroupByIdResponseObject interface {
	VisitGetChatGroupByIdResponse(ctx *fiber.Ctx) error
}

type GetChatGroupById200JSONResponse ChatGroup

func (response GetChatGroupById200JSONResponse) VisitGetChatGroupByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetChatGroupById404JSONResponse GlobalResponses

func (response GetChatGroupById404JSONResponse) VisitGetChatGroupByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetChatGroupById500JSONResponse GlobalResponses

func (response GetChatGroupById500JSONResponse) VisitGetChatGroupByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type UpdateChatGroupRequestObject struct {
	ChatGroupId string `json:"chatGroupId"`
	Body        *UpdateChatGroupJSONRequestBody
}

type UpdateChatGroupResponseObject interface {
	VisitUpdateChatGroupResponse(ctx *fiber.Ctx) error
}

type UpdateChatGroup200JSONResponse ChatGroup

func (response UpdateChatGroup200JSONResponse) VisitUpdateChatGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateChatGroup400JSONResponse GlobalResponses

func (response UpdateChatGroup400JSONResponse) VisitUpdateChatGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type UpdateChatGroup404JSONResponse GlobalResponses

func (response UpdateChatGroup404JSONResponse) VisitUpdateChatGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type UpdateChatGroup500JSONResponse GlobalResponses

func (response UpdateChatGroup500JSONResponse) VisitUpdateChatGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetAllChatsRequestObject struct {
}

type GetAllChatsResponseObject interface {
	VisitGetAllChatsResponse(ctx *fiber.Ctx) error
}

type GetAllChats200JSONResponse []Chat

func (response GetAllChats200JSONResponse) VisitGetAllChatsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetAllChats500JSONResponse GlobalResponses

func (response GetAllChats500JSONResponse) VisitGetAllChatsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type CreateChatRequestObject struct {
	Body *CreateChatJSONRequestBody
}

type CreateChatResponseObject interface {
	VisitCreateChatResponse(ctx *fiber.Ctx) error
}

type CreateChat201JSONResponse Chat

func (response CreateChat201JSONResponse) VisitCreateChatResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type CreateChat400JSONResponse GlobalResponses

func (response CreateChat400JSONResponse) VisitCreateChatResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type CreateChat500JSONResponse GlobalResponses

func (response CreateChat500JSONResponse) VisitCreateChatResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteChatRequestObject struct {
	ChatId string `json:"chatId"`
}

type DeleteChatResponseObject interface {
	VisitDeleteChatResponse(ctx *fiber.Ctx) error
}

type DeleteChat204Response struct {
}

func (response DeleteChat204Response) VisitDeleteChatResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteChat404JSONResponse GlobalResponses

func (response DeleteChat404JSONResponse) VisitDeleteChatResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteChat500JSONResponse GlobalResponses

func (response DeleteChat500JSONResponse) VisitDeleteChatResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetChatByIdRequestObject struct {
	ChatId string `json:"chatId"`
}

type GetChatByIdResponseObject interface {
	VisitGetChatByIdResponse(ctx *fiber.Ctx) error
}

type GetChatById200JSONResponse Chat

func (response GetChatById200JSONResponse) VisitGetChatByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetChatById404JSONResponse GlobalResponses

func (response GetChatById404JSONResponse) VisitGetChatByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetChatById500JSONResponse GlobalResponses

func (response GetChatById500JSONResponse) VisitGetChatByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type UpdateChatRequestObject struct {
	ChatId string `json:"chatId"`
	Body   *UpdateChatJSONRequestBody
}

type UpdateChatResponseObject interface {
	VisitUpdateChatResponse(ctx *fiber.Ctx) error
}

type UpdateChat200JSONResponse Chat

func (response UpdateChat200JSONResponse) VisitUpdateChatResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateChat400JSONResponse GlobalResponses

func (response UpdateChat400JSONResponse) VisitUpdateChatResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type UpdateChat404JSONResponse GlobalResponses

func (response UpdateChat404JSONResponse) VisitUpdateChatResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type UpdateChat500JSONResponse GlobalResponses

func (response UpdateChat500JSONResponse) VisitUpdateChatResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetAllHighlightsRequestObject struct {
}

type GetAllHighlightsResponseObject interface {
	VisitGetAllHighlightsResponse(ctx *fiber.Ctx) error
}

type GetAllHighlights200JSONResponse []Highlight

func (response GetAllHighlights200JSONResponse) VisitGetAllHighlightsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetAllHighlights500JSONResponse GlobalResponses

func (response GetAllHighlights500JSONResponse) VisitGetAllHighlightsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type CreateHighlightRequestObject struct {
	Body *CreateHighlightJSONRequestBody
}

type CreateHighlightResponseObject interface {
	VisitCreateHighlightResponse(ctx *fiber.Ctx) error
}

type CreateHighlight201JSONResponse Highlight

func (response CreateHighlight201JSONResponse) VisitCreateHighlightResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type CreateHighlight400JSONResponse GlobalResponses

func (response CreateHighlight400JSONResponse) VisitCreateHighlightResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type CreateHighlight500JSONResponse GlobalResponses

func (response CreateHighlight500JSONResponse) VisitCreateHighlightResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteHighlightByIdRequestObject struct {
	HighlightId string `json:"highlightId"`
}

type DeleteHighlightByIdResponseObject interface {
	VisitDeleteHighlightByIdResponse(ctx *fiber.Ctx) error
}

type DeleteHighlightById204Response struct {
}

func (response DeleteHighlightById204Response) VisitDeleteHighlightByIdResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteHighlightById404JSONResponse GlobalResponses

func (response DeleteHighlightById404JSONResponse) VisitDeleteHighlightByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteHighlightById500JSONResponse GlobalResponses

func (response DeleteHighlightById500JSONResponse) VisitDeleteHighlightByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetHighlightByIdRequestObject struct {
	HighlightId string `json:"highlightId"`
}

type GetHighlightByIdResponseObject interface {
	VisitGetHighlightByIdResponse(ctx *fiber.Ctx) error
}

type GetHighlightById200JSONResponse Highlight

func (response GetHighlightById200JSONResponse) VisitGetHighlightByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetHighlightById404JSONResponse GlobalResponses

func (response GetHighlightById404JSONResponse) VisitGetHighlightByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetHighlightById500JSONResponse GlobalResponses

func (response GetHighlightById500JSONResponse) VisitGetHighlightByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type UpdateHighlightByIdRequestObject struct {
	HighlightId string `json:"highlightId"`
	Body        *UpdateHighlightByIdJSONRequestBody
}

type UpdateHighlightByIdResponseObject interface {
	VisitUpdateHighlightByIdResponse(ctx *fiber.Ctx) error
}

type UpdateHighlightById200JSONResponse Highlight

func (response UpdateHighlightById200JSONResponse) VisitUpdateHighlightByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateHighlightById400JSONResponse GlobalResponses

func (response UpdateHighlightById400JSONResponse) VisitUpdateHighlightByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type UpdateHighlightById404JSONResponse GlobalResponses

func (response UpdateHighlightById404JSONResponse) VisitUpdateHighlightByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type UpdateHighlightById500JSONResponse GlobalResponses

func (response UpdateHighlightById500JSONResponse) VisitUpdateHighlightByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type UploadMediaRequestObject struct {
	Body *multipart.Reader
}

type UploadMediaResponseObject interface {
	VisitUploadMediaResponse(ctx *fiber.Ctx) error
}

type UploadMedia201JSONResponse Media

func (response UploadMedia201JSONResponse) VisitUploadMediaResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type UploadMedia400JSONResponse GlobalResponses

func (response UploadMedia400JSONResponse) VisitUploadMediaResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type UploadMedia500JSONResponse GlobalResponses

func (response UploadMedia500JSONResponse) VisitUploadMediaResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteMediaRequestObject struct {
	MediaId string `json:"mediaId"`
}

type DeleteMediaResponseObject interface {
	VisitDeleteMediaResponse(ctx *fiber.Ctx) error
}

type DeleteMedia204Response struct {
}

func (response DeleteMedia204Response) VisitDeleteMediaResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteMedia404JSONResponse GlobalResponses

func (response DeleteMedia404JSONResponse) VisitDeleteMediaResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteMedia500JSONResponse GlobalResponses

func (response DeleteMedia500JSONResponse) VisitDeleteMediaResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetMediaByIdRequestObject struct {
	MediaId string `json:"mediaId"`
}

type GetMediaByIdResponseObject interface {
	VisitGetMediaByIdResponse(ctx *fiber.Ctx) error
}

type GetMediaById200JSONResponse Media

func (response GetMediaById200JSONResponse) VisitGetMediaByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetMediaById404JSONResponse GlobalResponses

func (response GetMediaById404JSONResponse) VisitGetMediaByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetMediaById500JSONResponse GlobalResponses

func (response GetMediaById500JSONResponse) VisitGetMediaByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetMessagesByChatIdRequestObject struct {
	Params GetMessagesByChatIdParams
}

type GetMessagesByChatIdResponseObject interface {
	VisitGetMessagesByChatIdResponse(ctx *fiber.Ctx) error
}

type GetMessagesByChatId200JSONResponse []Message

func (response GetMessagesByChatId200JSONResponse) VisitGetMessagesByChatIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetMessagesByChatId400JSONResponse GlobalResponses

func (response GetMessagesByChatId400JSONResponse) VisitGetMessagesByChatIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetMessagesByChatId500JSONResponse GlobalResponses

func (response GetMessagesByChatId500JSONResponse) VisitGetMessagesByChatIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type SendMessageRequestObject struct {
	Body *SendMessageJSONRequestBody
}

type SendMessageResponseObject interface {
	VisitSendMessageResponse(ctx *fiber.Ctx) error
}

type SendMessage201JSONResponse Message

func (response SendMessage201JSONResponse) VisitSendMessageResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type SendMessage400JSONResponse GlobalResponses

func (response SendMessage400JSONResponse) VisitSendMessageResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type SendMessage500JSONResponse GlobalResponses

func (response SendMessage500JSONResponse) VisitSendMessageResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteMessageRequestObject struct {
	MessageId string `json:"messageId"`
}

type DeleteMessageResponseObject interface {
	VisitDeleteMessageResponse(ctx *fiber.Ctx) error
}

type DeleteMessage204Response struct {
}

func (response DeleteMessage204Response) VisitDeleteMessageResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteMessage404JSONResponse GlobalResponses

func (response DeleteMessage404JSONResponse) VisitDeleteMessageResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteMessage500JSONResponse GlobalResponses

func (response DeleteMessage500JSONResponse) VisitDeleteMessageResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetMessageByIdRequestObject struct {
	MessageId string `json:"messageId"`
}

type GetMessageByIdResponseObject interface {
	VisitGetMessageByIdResponse(ctx *fiber.Ctx) error
}

type GetMessageById200JSONResponse Message

func (response GetMessageById200JSONResponse) VisitGetMessageByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetMessageById404JSONResponse GlobalResponses

func (response GetMessageById404JSONResponse) VisitGetMessageByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetMessageById500JSONResponse GlobalResponses

func (response GetMessageById500JSONResponse) VisitGetMessageByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type UpdateMessageRequestObject struct {
	MessageId string `json:"messageId"`
	Body      *UpdateMessageJSONRequestBody
}

type UpdateMessageResponseObject interface {
	VisitUpdateMessageResponse(ctx *fiber.Ctx) error
}

type UpdateMessage200JSONResponse Message

func (response UpdateMessage200JSONResponse) VisitUpdateMessageResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateMessage400JSONResponse GlobalResponses

func (response UpdateMessage400JSONResponse) VisitUpdateMessageResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type UpdateMessage404JSONResponse GlobalResponses

func (response UpdateMessage404JSONResponse) VisitUpdateMessageResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type UpdateMessage500JSONResponse GlobalResponses

func (response UpdateMessage500JSONResponse) VisitUpdateMessageResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetUserSettingsRequestObject struct {
	UserId string `json:"userId"`
}

type GetUserSettingsResponseObject interface {
	VisitGetUserSettingsResponse(ctx *fiber.Ctx) error
}

type GetUserSettings200JSONResponse Settings

func (response GetUserSettings200JSONResponse) VisitGetUserSettingsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetUserSettings404JSONResponse GlobalResponses

func (response GetUserSettings404JSONResponse) VisitGetUserSettingsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetUserSettings500JSONResponse GlobalResponses

func (response GetUserSettings500JSONResponse) VisitGetUserSettingsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type UpdateUserSettingsRequestObject struct {
	UserId string `json:"userId"`
	Body   *UpdateUserSettingsJSONRequestBody
}

type UpdateUserSettingsResponseObject interface {
	VisitUpdateUserSettingsResponse(ctx *fiber.Ctx) error
}

type UpdateUserSettings200JSONResponse Settings

func (response UpdateUserSettings200JSONResponse) VisitUpdateUserSettingsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateUserSettings400JSONResponse GlobalResponses

func (response UpdateUserSettings400JSONResponse) VisitUpdateUserSettingsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type UpdateUserSettings404JSONResponse GlobalResponses

func (response UpdateUserSettings404JSONResponse) VisitUpdateUserSettingsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type UpdateUserSettings500JSONResponse GlobalResponses

func (response UpdateUserSettings500JSONResponse) VisitUpdateUserSettingsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetAllUsersRequestObject struct {
}

type GetAllUsersResponseObject interface {
	VisitGetAllUsersResponse(ctx *fiber.Ctx) error
}

type GetAllUsers200JSONResponse []User

func (response GetAllUsers200JSONResponse) VisitGetAllUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetAllUsers500JSONResponse GlobalResponses

func (response GetAllUsers500JSONResponse) VisitGetAllUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(ctx *fiber.Ctx) error
}

type CreateUser201JSONResponse User

func (response CreateUser201JSONResponse) VisitCreateUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type CreateUser400JSONResponse GlobalResponses

func (response CreateUser400JSONResponse) VisitCreateUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type CreateUser500JSONResponse GlobalResponses

func (response CreateUser500JSONResponse) VisitCreateUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteUserRequestObject struct {
	UserId string `json:"userId"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(ctx *fiber.Ctx) error
}

type DeleteUser204Response struct {
}

func (response DeleteUser204Response) VisitDeleteUserResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteUser404JSONResponse GlobalResponses

func (response DeleteUser404JSONResponse) VisitDeleteUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteUser500JSONResponse GlobalResponses

func (response DeleteUser500JSONResponse) VisitDeleteUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetUserByIdRequestObject struct {
	UserId string `json:"userId"`
}

type GetUserByIdResponseObject interface {
	VisitGetUserByIdResponse(ctx *fiber.Ctx) error
}

type GetUserById200JSONResponse struct{ UserSuccessJSONResponse }

func (response GetUserById200JSONResponse) VisitGetUserByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetUserById404JSONResponse GlobalResponses

func (response GetUserById404JSONResponse) VisitGetUserByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetUserById500JSONResponse GlobalResponses

func (response GetUserById500JSONResponse) VisitGetUserByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type UpdateUserRequestObject struct {
	UserId string `json:"userId"`
	Body   *UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(ctx *fiber.Ctx) error
}

type UpdateUser200JSONResponse User

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateUser400JSONResponse GlobalResponses

func (response UpdateUser400JSONResponse) VisitUpdateUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type UpdateUser404JSONResponse GlobalResponses

func (response UpdateUser404JSONResponse) VisitUpdateUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type UpdateUser500JSONResponse GlobalResponses

func (response UpdateUser500JSONResponse) VisitUpdateUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Index entry for api status
	// (GET /)
	Index(ctx context.Context, request IndexRequestObject) (IndexResponseObject, error)
	// Logs in and returns JWT-auth-token
	// (POST /auth/login)
	AuthLogin(ctx context.Context, request AuthLoginRequestObject) (AuthLoginResponseObject, error)
	// Registers and returns user information
	// (POST /auth/register)
	AuthRegister(ctx context.Context, request AuthRegisterRequestObject) (AuthRegisterResponseObject, error)
	// Get all chat groups
	// (GET /chatgroups)
	GetAllChatGroups(ctx context.Context, request GetAllChatGroupsRequestObject) (GetAllChatGroupsResponseObject, error)
	// Create a new chat group
	// (POST /chatgroups)
	CreateChatGroup(ctx context.Context, request CreateChatGroupRequestObject) (CreateChatGroupResponseObject, error)
	// Delete a chat group
	// (DELETE /chatgroups/{chatGroupId})
	DeleteChatGroup(ctx context.Context, request DeleteChatGroupRequestObject) (DeleteChatGroupResponseObject, error)
	// Get a chat group by ID
	// (GET /chatgroups/{chatGroupId})
	GetChatGroupById(ctx context.Context, request GetChatGroupByIdRequestObject) (GetChatGroupByIdResponseObject, error)
	// Update a chat group
	// (PUT /chatgroups/{chatGroupId})
	UpdateChatGroup(ctx context.Context, request UpdateChatGroupRequestObject) (UpdateChatGroupResponseObject, error)
	// Get all chats
	// (GET /chats)
	GetAllChats(ctx context.Context, request GetAllChatsRequestObject) (GetAllChatsResponseObject, error)
	// Create a new chat
	// (POST /chats)
	CreateChat(ctx context.Context, request CreateChatRequestObject) (CreateChatResponseObject, error)
	// Delete a chat
	// (DELETE /chats/{chatId})
	DeleteChat(ctx context.Context, request DeleteChatRequestObject) (DeleteChatResponseObject, error)
	// Get a chat by ID
	// (GET /chats/{chatId})
	GetChatById(ctx context.Context, request GetChatByIdRequestObject) (GetChatByIdResponseObject, error)
	// Update a chat
	// (PUT /chats/{chatId})
	UpdateChat(ctx context.Context, request UpdateChatRequestObject) (UpdateChatResponseObject, error)
	// Get all highlights
	// (GET /highlights)
	GetAllHighlights(ctx context.Context, request GetAllHighlightsRequestObject) (GetAllHighlightsResponseObject, error)
	// Create a new highlight
	// (POST /highlights)
	CreateHighlight(ctx context.Context, request CreateHighlightRequestObject) (CreateHighlightResponseObject, error)
	// Delete highlight by ID
	// (DELETE /highlights/{highlightId})
	DeleteHighlightById(ctx context.Context, request DeleteHighlightByIdRequestObject) (DeleteHighlightByIdResponseObject, error)
	// Get highlight by ID
	// (GET /highlights/{highlightId})
	GetHighlightById(ctx context.Context, request GetHighlightByIdRequestObject) (GetHighlightByIdResponseObject, error)
	// Update highlight by ID
	// (PUT /highlights/{highlightId})
	UpdateHighlightById(ctx context.Context, request UpdateHighlightByIdRequestObject) (UpdateHighlightByIdResponseObject, error)
	// Upload media
	// (POST /media)
	UploadMedia(ctx context.Context, request UploadMediaRequestObject) (UploadMediaResponseObject, error)
	// Delete media
	// (DELETE /media/{mediaId})
	DeleteMedia(ctx context.Context, request DeleteMediaRequestObject) (DeleteMediaResponseObject, error)
	// Get media by ID
	// (GET /media/{mediaId})
	GetMediaById(ctx context.Context, request GetMediaByIdRequestObject) (GetMediaByIdResponseObject, error)
	// Get messages for a chat
	// (GET /messages)
	GetMessagesByChatId(ctx context.Context, request GetMessagesByChatIdRequestObject) (GetMessagesByChatIdResponseObject, error)
	// Send a new message
	// (POST /messages)
	SendMessage(ctx context.Context, request SendMessageRequestObject) (SendMessageResponseObject, error)
	// Delete a message
	// (DELETE /messages/{messageId})
	DeleteMessage(ctx context.Context, request DeleteMessageRequestObject) (DeleteMessageResponseObject, error)
	// Get a message by ID
	// (GET /messages/{messageId})
	GetMessageById(ctx context.Context, request GetMessageByIdRequestObject) (GetMessageByIdResponseObject, error)
	// Update a message
	// (PUT /messages/{messageId})
	UpdateMessage(ctx context.Context, request UpdateMessageRequestObject) (UpdateMessageResponseObject, error)
	// Get user settings
	// (GET /settings/{userId})
	GetUserSettings(ctx context.Context, request GetUserSettingsRequestObject) (GetUserSettingsResponseObject, error)
	// Update user settings
	// (PUT /settings/{userId})
	UpdateUserSettings(ctx context.Context, request UpdateUserSettingsRequestObject) (UpdateUserSettingsResponseObject, error)
	// Get all users
	// (GET /users)
	GetAllUsers(ctx context.Context, request GetAllUsersRequestObject) (GetAllUsersResponseObject, error)
	// Create a new user
	// (POST /users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// Delete a user
	// (DELETE /users/{userId})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// Get a user by ID
	// (GET /users/{userId})
	GetUserById(ctx context.Context, request GetUserByIdRequestObject) (GetUserByIdResponseObject, error)
	// Update a user
	// (PUT /users/{userId})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Index operation middleware
func (sh *strictHandler) Index(ctx *fiber.Ctx) error {
	var request IndexRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Index(ctx.UserContext(), request.(IndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Index")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(IndexResponseObject); ok {
		if err := validResponse.VisitIndexResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AuthLogin operation middleware
func (sh *strictHandler) AuthLogin(ctx *fiber.Ctx) error {
	var request AuthLoginRequestObject

	var body AuthLoginJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AuthLogin(ctx.UserContext(), request.(AuthLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(AuthLoginResponseObject); ok {
		if err := validResponse.VisitAuthLoginResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AuthRegister operation middleware
func (sh *strictHandler) AuthRegister(ctx *fiber.Ctx) error {
	var request AuthRegisterRequestObject

	var body AuthRegisterJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AuthRegister(ctx.UserContext(), request.(AuthRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthRegister")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(AuthRegisterResponseObject); ok {
		if err := validResponse.VisitAuthRegisterResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllChatGroups operation middleware
func (sh *strictHandler) GetAllChatGroups(ctx *fiber.Ctx) error {
	var request GetAllChatGroupsRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllChatGroups(ctx.UserContext(), request.(GetAllChatGroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllChatGroups")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetAllChatGroupsResponseObject); ok {
		if err := validResponse.VisitGetAllChatGroupsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateChatGroup operation middleware
func (sh *strictHandler) CreateChatGroup(ctx *fiber.Ctx) error {
	var request CreateChatGroupRequestObject

	var body CreateChatGroupJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateChatGroup(ctx.UserContext(), request.(CreateChatGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateChatGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateChatGroupResponseObject); ok {
		if err := validResponse.VisitCreateChatGroupResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteChatGroup operation middleware
func (sh *strictHandler) DeleteChatGroup(ctx *fiber.Ctx, chatGroupId string) error {
	var request DeleteChatGroupRequestObject

	request.ChatGroupId = chatGroupId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatGroup(ctx.UserContext(), request.(DeleteChatGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteChatGroupResponseObject); ok {
		if err := validResponse.VisitDeleteChatGroupResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetChatGroupById operation middleware
func (sh *strictHandler) GetChatGroupById(ctx *fiber.Ctx, chatGroupId string) error {
	var request GetChatGroupByIdRequestObject

	request.ChatGroupId = chatGroupId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatGroupById(ctx.UserContext(), request.(GetChatGroupByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatGroupById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetChatGroupByIdResponseObject); ok {
		if err := validResponse.VisitGetChatGroupByIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateChatGroup operation middleware
func (sh *strictHandler) UpdateChatGroup(ctx *fiber.Ctx, chatGroupId string) error {
	var request UpdateChatGroupRequestObject

	request.ChatGroupId = chatGroupId

	var body UpdateChatGroupJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateChatGroup(ctx.UserContext(), request.(UpdateChatGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateChatGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateChatGroupResponseObject); ok {
		if err := validResponse.VisitUpdateChatGroupResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllChats operation middleware
func (sh *strictHandler) GetAllChats(ctx *fiber.Ctx) error {
	var request GetAllChatsRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllChats(ctx.UserContext(), request.(GetAllChatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllChats")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetAllChatsResponseObject); ok {
		if err := validResponse.VisitGetAllChatsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateChat operation middleware
func (sh *strictHandler) CreateChat(ctx *fiber.Ctx) error {
	var request CreateChatRequestObject

	var body CreateChatJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateChat(ctx.UserContext(), request.(CreateChatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateChat")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateChatResponseObject); ok {
		if err := validResponse.VisitCreateChatResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteChat operation middleware
func (sh *strictHandler) DeleteChat(ctx *fiber.Ctx, chatId string) error {
	var request DeleteChatRequestObject

	request.ChatId = chatId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChat(ctx.UserContext(), request.(DeleteChatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChat")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteChatResponseObject); ok {
		if err := validResponse.VisitDeleteChatResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetChatById operation middleware
func (sh *strictHandler) GetChatById(ctx *fiber.Ctx, chatId string) error {
	var request GetChatByIdRequestObject

	request.ChatId = chatId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatById(ctx.UserContext(), request.(GetChatByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetChatByIdResponseObject); ok {
		if err := validResponse.VisitGetChatByIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateChat operation middleware
func (sh *strictHandler) UpdateChat(ctx *fiber.Ctx, chatId string) error {
	var request UpdateChatRequestObject

	request.ChatId = chatId

	var body UpdateChatJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateChat(ctx.UserContext(), request.(UpdateChatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateChat")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateChatResponseObject); ok {
		if err := validResponse.VisitUpdateChatResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllHighlights operation middleware
func (sh *strictHandler) GetAllHighlights(ctx *fiber.Ctx) error {
	var request GetAllHighlightsRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllHighlights(ctx.UserContext(), request.(GetAllHighlightsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllHighlights")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetAllHighlightsResponseObject); ok {
		if err := validResponse.VisitGetAllHighlightsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateHighlight operation middleware
func (sh *strictHandler) CreateHighlight(ctx *fiber.Ctx) error {
	var request CreateHighlightRequestObject

	var body CreateHighlightJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateHighlight(ctx.UserContext(), request.(CreateHighlightRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateHighlight")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateHighlightResponseObject); ok {
		if err := validResponse.VisitCreateHighlightResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteHighlightById operation middleware
func (sh *strictHandler) DeleteHighlightById(ctx *fiber.Ctx, highlightId string) error {
	var request DeleteHighlightByIdRequestObject

	request.HighlightId = highlightId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteHighlightById(ctx.UserContext(), request.(DeleteHighlightByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteHighlightById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteHighlightByIdResponseObject); ok {
		if err := validResponse.VisitDeleteHighlightByIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetHighlightById operation middleware
func (sh *strictHandler) GetHighlightById(ctx *fiber.Ctx, highlightId string) error {
	var request GetHighlightByIdRequestObject

	request.HighlightId = highlightId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetHighlightById(ctx.UserContext(), request.(GetHighlightByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHighlightById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetHighlightByIdResponseObject); ok {
		if err := validResponse.VisitGetHighlightByIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateHighlightById operation middleware
func (sh *strictHandler) UpdateHighlightById(ctx *fiber.Ctx, highlightId string) error {
	var request UpdateHighlightByIdRequestObject

	request.HighlightId = highlightId

	var body UpdateHighlightByIdJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateHighlightById(ctx.UserContext(), request.(UpdateHighlightByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateHighlightById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateHighlightByIdResponseObject); ok {
		if err := validResponse.VisitUpdateHighlightByIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UploadMedia operation middleware
func (sh *strictHandler) UploadMedia(ctx *fiber.Ctx) error {
	var request UploadMediaRequestObject

	request.Body = multipart.NewReader(bytes.NewReader(ctx.Request().Body()), string(ctx.Request().Header.MultipartFormBoundary()))

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UploadMedia(ctx.UserContext(), request.(UploadMediaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UploadMedia")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UploadMediaResponseObject); ok {
		if err := validResponse.VisitUploadMediaResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteMedia operation middleware
func (sh *strictHandler) DeleteMedia(ctx *fiber.Ctx, mediaId string) error {
	var request DeleteMediaRequestObject

	request.MediaId = mediaId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMedia(ctx.UserContext(), request.(DeleteMediaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMedia")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteMediaResponseObject); ok {
		if err := validResponse.VisitDeleteMediaResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMediaById operation middleware
func (sh *strictHandler) GetMediaById(ctx *fiber.Ctx, mediaId string) error {
	var request GetMediaByIdRequestObject

	request.MediaId = mediaId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetMediaById(ctx.UserContext(), request.(GetMediaByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMediaById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetMediaByIdResponseObject); ok {
		if err := validResponse.VisitGetMediaByIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMessagesByChatId operation middleware
func (sh *strictHandler) GetMessagesByChatId(ctx *fiber.Ctx, params GetMessagesByChatIdParams) error {
	var request GetMessagesByChatIdRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetMessagesByChatId(ctx.UserContext(), request.(GetMessagesByChatIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMessagesByChatId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetMessagesByChatIdResponseObject); ok {
		if err := validResponse.VisitGetMessagesByChatIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SendMessage operation middleware
func (sh *strictHandler) SendMessage(ctx *fiber.Ctx) error {
	var request SendMessageRequestObject

	var body SendMessageJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.SendMessage(ctx.UserContext(), request.(SendMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendMessage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(SendMessageResponseObject); ok {
		if err := validResponse.VisitSendMessageResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteMessage operation middleware
func (sh *strictHandler) DeleteMessage(ctx *fiber.Ctx, messageId string) error {
	var request DeleteMessageRequestObject

	request.MessageId = messageId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMessage(ctx.UserContext(), request.(DeleteMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMessage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteMessageResponseObject); ok {
		if err := validResponse.VisitDeleteMessageResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMessageById operation middleware
func (sh *strictHandler) GetMessageById(ctx *fiber.Ctx, messageId string) error {
	var request GetMessageByIdRequestObject

	request.MessageId = messageId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetMessageById(ctx.UserContext(), request.(GetMessageByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMessageById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetMessageByIdResponseObject); ok {
		if err := validResponse.VisitGetMessageByIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateMessage operation middleware
func (sh *strictHandler) UpdateMessage(ctx *fiber.Ctx, messageId string) error {
	var request UpdateMessageRequestObject

	request.MessageId = messageId

	var body UpdateMessageJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateMessage(ctx.UserContext(), request.(UpdateMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateMessage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateMessageResponseObject); ok {
		if err := validResponse.VisitUpdateMessageResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUserSettings operation middleware
func (sh *strictHandler) GetUserSettings(ctx *fiber.Ctx, userId string) error {
	var request GetUserSettingsRequestObject

	request.UserId = userId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserSettings(ctx.UserContext(), request.(GetUserSettingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserSettings")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetUserSettingsResponseObject); ok {
		if err := validResponse.VisitGetUserSettingsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateUserSettings operation middleware
func (sh *strictHandler) UpdateUserSettings(ctx *fiber.Ctx, userId string) error {
	var request UpdateUserSettingsRequestObject

	request.UserId = userId

	var body UpdateUserSettingsJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUserSettings(ctx.UserContext(), request.(UpdateUserSettingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUserSettings")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateUserSettingsResponseObject); ok {
		if err := validResponse.VisitUpdateUserSettingsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllUsers operation middleware
func (sh *strictHandler) GetAllUsers(ctx *fiber.Ctx) error {
	var request GetAllUsersRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllUsers(ctx.UserContext(), request.(GetAllUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetAllUsersResponseObject); ok {
		if err := validResponse.VisitGetAllUsersResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx *fiber.Ctx) error {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx.UserContext(), request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(ctx *fiber.Ctx, userId string) error {
	var request DeleteUserRequestObject

	request.UserId = userId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx.UserContext(), request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUserById operation middleware
func (sh *strictHandler) GetUserById(ctx *fiber.Ctx, userId string) error {
	var request GetUserByIdRequestObject

	request.UserId = userId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserById(ctx.UserContext(), request.(GetUserByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetUserByIdResponseObject); ok {
		if err := validResponse.VisitGetUserByIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(ctx *fiber.Ctx, userId string) error {
	var request UpdateUserRequestObject

	request.UserId = userId

	var body UpdateUserJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx.UserContext(), request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		if err := validResponse.VisitUpdateUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
